# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- dev
- main
- feature/*

pool:
  vmImage: ubuntu-latest

# load variables based on environment using compile-time conditionals
variables:
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - group: cfg-volunteer-prod
- ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
  - group: cfg-volunteer-dev

steps:

- checkout: self
  submodules: true

- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

# moving files post-build
- script: |
    cd client
    npm install --no-audit
    npm audit --omit=dev
    npm run build
    mv build ../app_dist
    cp ../staticwebapp.config.json ../app_dist/staticwebapp.config.json
  displayName: 'npm install and build'
  env: # set environment variables that are used during build time here. These are non-secret
    VITE_MSAL_CLIENT_ID: '$(msal-client-id)'
    VITE_MSAL_AUTHORITY: '$(msal-authority)'
    VITE_SIGN_IN_REDIRECT: '$(app-redirect-url)'
    VITE_SIGN_OUT_REDIRECT: '$(app-redirect-url)'
    VITE_FB_API_KEY: '$(fb-api-key)'
    VITE_FB_AUTH_DOMAIN: '$(fb-auth-domain)'
    VITE_FB_PROJECT_ID: '$(fb-project-id)'
    VITE_FB_STORAGE_BUCKET: '$(fb-storage-bucket)'
    VITE_FB_MESSAGING_SENDER_ID: '$(fb-msg-sender-id)'
    VITE_FB_APP_ID: '$(fb-app-id)'
    VITE_AZURE_CLOUD_FUNCTION_BASE_URL: '$(app-root-url)'
    VITE_REGISTRATION_CONFIRMATION_EMAIL_TEMPLATE_ID: '$(sg-registration-template)'

# Include the firebase credentials from static files
- task: DownloadSecureFile@1
  name: fbCreds
  displayName: 'Download FB credentials'
  inputs:
    secureFile: '$(fb-creds-name)'

- script: |
    echo "Including firebase credential secret file: $(fb-creds-name)"
    cp $(fbCreds.secureFilePath) $(System.DefaultWorkingDirectory)/server/$(fb-creds-name)
  displayName: 'Apply firebase credentials'

- task: AzureStaticWebApp@0
  inputs:
    production_branch: 'main' # defines which branch is the main site, other branches get previews
    app_location: 'app_dist' # App built files cwd
    api_location: 'server' # Api source code path relative to cwd
    skip_api_build: false # Build the app backend to Functions 
    skip_app_build: true # handled by react in script step
    output_location: '' # empty because we're skipping the app build
    cwd: '$(System.DefaultWorkingDirectory)' # Working directory - optional
    azure_static_web_apps_api_token: $(swa_deploy_token)